From e936b45a548f13cb7fcc8d74c26407dc4d573516 Mon Sep 17 00:00:00 2001
From: jocelio <jocelio27@gmail.com>
Date: Mon, 25 Jun 2018 00:38:00 -0300
Subject: [PATCH] My submission
XOV: XO_0_0_1

---
 Readme.txt                                         | 12 +++--
 .../techtrial/controller/PanelController.java      | 51 +++++++++++++++++----
 .../repository/HourlyElectricityRepository.java    | 13 ++++--
 .../service/HourlyElectricityService.java          |  8 ++++
 .../service/HourlyElectricityServiceImpl.java      |  9 ++++
 .../resources/db/changelog/db.changelog-2.0.xml    | 12 +++++
 .../resources/db/changelog/db.changelog-master.xml |  1 +
 .../techtrial/controller/PanelControllerTest.java  | 53 ++++++++++++++++++++--
 8 files changed, 141 insertions(+), 18 deletions(-)
 create mode 100755 src/main/resources/db/changelog/db.changelog-2.0.xml

diff --git a/Readme.txt b/Readme.txt
index 91be5e0..dbf11ed 100644
--- a/Readme.txt
+++ b/Readme.txt
@@ -6,9 +6,15 @@ Notes:
 	- Frontend application excluded from the current scope. It is a separate, fully-functioning application handled by another team, so we do not want to modify it.
 
 Tasks:
-	1)	Increase unit test coverage to reach 60%, achieving more than 60% will only consume your valuable time without extra score.
-	2)	Find bugs and fix them, hint: we provided Cross-Solar application in a good structure, so no need to spend your valuable time on structure modifications,  just focus on fixing bugs.
-	3) 	Frontend team wants to display panel’s all historical data in a chart, in which each point represents electricity generated by this panel each day [sum, min, max, average] up to the end of previous day , your goal is to implement backend part of this task, API specifications already there in code as agreed with Frontend team, and it is ok to implement this task without any optimization.
+	1)	Increase unit test coverage to reach 60%, achieving more than 60% will only consume
+	    your valuable time without extra score.
+	2)	Find bugs and fix them, hint: we provided Cross-Solar application in a good structure,
+	    so no need to spend your valuable time on structure modifications,  just focus on fixing bugs.
+	3) 	Frontend team wants to display panel’s all historical data in a chart, in which each point
+        represents electricity generated by this panel each day [sum, min, max, average] up to the end
+        of previous day , your goal is to implement backend part of this task, API specifications already
+        there in code as agreed with Frontend team, and it is ok to implement this task without any
+        optimization.
 
 Prerequisites:
 	Any IDE
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..1ccf1b1 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -5,8 +5,14 @@ import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -18,6 +24,10 @@ import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
 
+import static java.util.stream.Collectors.groupingBy;
+import static java.util.stream.Collectors.mapping;
+import static java.util.stream.Collectors.toList;
+
 /**
  * Panel Controller for all Rest APIs related to Panel.
  * @author Crossover
@@ -55,6 +65,8 @@ public class PanelController {
   public ResponseEntity<?> saveHourlyElectricity(
       @PathVariable(value = "panel-serial") String panelSerial, 
       @RequestBody HourlyElectricity hourlyElectricity) {
+    Panel panel = panelService.findBySerial(panelSerial);
+    hourlyElectricity.setPanel(panel);
     return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
   }
    
@@ -64,14 +76,13 @@ public class PanelController {
   
   @GetMapping(path = "/api/panels/{panel-serial}/hourly")
   public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
+      @PathVariable(value = "panel-serial") String panelSerial,
       @PageableDefault(size = 5,value = 0) Pageable pageable) {
     Panel panel = panelService.findBySerial(panelSerial);
     if (panel == null) {
       return ResponseEntity.notFound().build(); 
     }
-    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
-        panel.getId(), pageable);
+    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(), pageable);
     return ResponseEntity.ok(page);
   }
   
@@ -85,11 +96,33 @@ public class PanelController {
   @GetMapping(path = "/api/panels/{panel-serial}/daily")
   public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
       @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
-    /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
-     */
-    return ResponseEntity.ok(dailyElectricityForPanel);
+
+      Panel panel = panelService.findBySerial(panelSerial);
+
+      List<HourlyElectricity> hourlyEletricity = hourlyElectricityService
+              .findAllByPanelIdAndReadingAtLessThan(panel.getId(), LocalDate.now().atStartOfDay());
+
+      List<DailyElectricity> dailyElectricityForPanel = hourlyEletricity.stream()
+            .collect(groupingBy(g -> g.getReadingAt().toLocalDate(), toList()))
+            .entrySet().stream()
+            .map(entry -> {
+
+                  DailyElectricity dailyElectricity = new DailyElectricity();
+                  dailyElectricity.setDate(entry.getKey());
+
+                  final Double sum = entry.getValue().stream().map(HourlyElectricity::getGeneratedElectricity).reduce(0L, Long::sum).doubleValue();
+                  final Long min = entry.getValue().stream().map(HourlyElectricity::getGeneratedElectricity).min(Long::compareTo).orElse(0L);
+                  final Long max = entry.getValue().stream().map(HourlyElectricity::getGeneratedElectricity).max(Long::compareTo).orElse(0L);
+
+                  dailyElectricity.setAverage(sum / entry.getValue().size());
+                  dailyElectricity.setSum(sum.longValue());
+                  dailyElectricity.setMin(min);
+                  dailyElectricity.setMax(max);
+
+                  return dailyElectricity;
+
+            }).collect(toList());
+
+      return ResponseEntity.ok(dailyElectricityForPanel);
   }
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
index b883493..8be748a 100644
--- a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
@@ -6,12 +6,19 @@ import org.springframework.data.domain.Pageable;
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.data.rest.core.annotation.RestResource;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.List;
+
 /**
  * HourlyElectricity Repository is for all operations for HourlyElectricity.
  * @author Crossover
  */
 @RestResource(exported = false)
-public interface HourlyElectricityRepository 
-    extends PagingAndSortingRepository<HourlyElectricity,Long> {
-  Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+public interface HourlyElectricityRepository  extends PagingAndSortingRepository<HourlyElectricity,Long> {
+
+  Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId, Pageable pageable);
+
+  List<HourlyElectricity> findAllByPanelIdAndReadingAtLessThan(Long panelId, LocalDateTime date);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
index 70c40b7..47f1d0c 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
@@ -4,13 +4,21 @@ import com.crossover.techtrial.model.HourlyElectricity;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.List;
+
 /**
  * HourlyElectricityService interface for all services realted to HourlyElectricity.
  * @author Crossover
  *
  */
 public interface HourlyElectricityService {
+
   HourlyElectricity save(HourlyElectricity hourlyElectricity);
   
   Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
+
+  List<HourlyElectricity> findAllByPanelIdAndReadingAtLessThan(Long panelId, LocalDateTime date);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
index 6634e49..c6117c2 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
@@ -8,6 +8,10 @@ import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Service;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.List;
+
 /**
  * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
  *
@@ -17,6 +21,7 @@ import org.springframework.stereotype.Service;
 
 @Service
 public class HourlyElectricityServiceImpl implements HourlyElectricityService {
+
   @Autowired
   HourlyElectricityRepository hourlyElectricityRepository;
   
@@ -27,5 +32,9 @@ public class HourlyElectricityServiceImpl implements HourlyElectricityService {
   public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
     return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
   }
+
+  public List<HourlyElectricity> findAllByPanelIdAndReadingAtLessThan(Long panelId, LocalDateTime date) {
+    return hourlyElectricityRepository.findAllByPanelIdAndReadingAtLessThan(panelId, date);
+  }
   
 }
\ No newline at end of file
diff --git a/src/main/resources/db/changelog/db.changelog-2.0.xml b/src/main/resources/db/changelog/db.changelog-2.0.xml
new file mode 100755
index 0000000..42fdefd
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-2.0.xml
@@ -0,0 +1,12 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <changeSet author="jocelio" id="addUniqueConstraint-serial">
+        <addUniqueConstraint catalogName="crosssolar"
+                             columnNames="serial"
+                             constraintName="unique_serial"
+                             deferrable="true"
+                             disabled="true"
+                             initiallyDeferred="true"
+                             tableName="panel"/>
+    </changeSet>
+</databaseChangeLog>
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
index ea61ac5..af6afac 100755
--- a/src/main/resources/db/changelog/db.changelog-master.xml
+++ b/src/main/resources/db/changelog/db.changelog-master.xml
@@ -3,4 +3,5 @@
   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
   <include file="db/changelog/db.changelog-1.0.xml"/>
+  <include file="db/changelog/db.changelog-2.0.xml"/>
 </databaseChangeLog>
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..f7af918 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -45,17 +45,64 @@ public class PanelControllerTest {
 
   @Test
   public void testPanelShouldBeRegistered() throws Exception {
+    String randSerial = getRandomSerial();
     HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
+        "{\"serial\": \""+randSerial+"\", \"longitude\": \"54.123232\","
             + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
-    ResponseEntity<Panel> response = template.postForEntity(
-        "/api/register", panel, Panel.class);
+    ResponseEntity<Panel> response = template.postForEntity("/api/register", panel, Panel.class);
     Assert.assertEquals(202,response.getStatusCode().value());
   }
 
+  @Test
+  public void testHourlyElectricityShouldBeRegistered() throws Exception {
+    String randSerial = getRandomSerial();
+    HttpEntity<Object> panel = getHttpEntity(
+            "{\"serial\": \""+randSerial+"\", \"longitude\": \"54.123232\","
+                    + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
+    template.postForEntity("/api/register", panel, Panel.class);
+
+    HttpEntity<Object> hourlyEletricity = getHttpEntity("{ \"generatedElectricity\": 100" +
+            " , \"readingAt\": \"2018-06-24T12:29:00\"}");
+    ResponseEntity<Panel> response = template.postForEntity(
+            "/api/panels/"+randSerial+"/hourly", hourlyEletricity, Panel.class);
+    Assert.assertEquals(200,response.getStatusCode().value());
+  }
+
+  @Test
+  public void testSouldReturnHourlyElectricityRegisteredFromPanel() throws Exception {
+
+    String randSerial = getRandomSerial();
+
+    HttpEntity<Object> panel = getHttpEntity(
+            "{\"serial\": \""+randSerial+"\", \"longitude\": \"54.123232\","
+                    + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
+    template.postForEntity("/api/register", panel, Panel.class);
+
+    HttpEntity<Object> hourlyEletricity = getHttpEntity(
+            "{ \"generatedElectricity\": 100" +
+                  " , \"readingAt\": \"2018-06-24T12:29:00\"}");
+    ResponseEntity<Panel> response = template.postForEntity("/api/panels/"+randSerial+"/hourly", hourlyEletricity, Panel.class);
+    Assert.assertEquals(200,response.getStatusCode().value());
+
+    HttpEntity<Object> hourlyEletricity2 = getHttpEntity(
+            "{ \"generatedElectricity\": 200" +
+                    " , \"readingAt\": \"2018-06-24T13:29:00\"}");
+    ResponseEntity<Panel> response2 = template.postForEntity("/api/panels/"+randSerial+"/hourly", hourlyEletricity2, Panel.class);
+    Assert.assertEquals(200,response.getStatusCode().value());
+
+    ResponseEntity<String> responseGet = template.getForEntity("/api/panels/"+randSerial+"/hourly", String.class);
+    Assert.assertEquals(200,responseGet.getStatusCode().value());
+
+  }
+
+
   private HttpEntity<Object> getHttpEntity(Object body) {
     HttpHeaders headers = new HttpHeaders();
     headers.setContentType(MediaType.APPLICATION_JSON);
     return new HttpEntity<Object>(body, headers);
   }
+
+  private String getRandomSerial(){
+    return Integer.toString(1 + (int)(Math.random() * Integer.MAX_VALUE));
+  }
 }
-- 
2.16.2

